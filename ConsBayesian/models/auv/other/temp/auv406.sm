ctmc
//Fixed params for all chains
const double p_OK			= 0.2;     // the probability that a chain is not dirty
const double r_inspect	= 1.0;// assuming the average chain inspection time is 30 seconds
const double r_travel     = 0.25;// assuming the average travel time between chains is 2*60 seconds
const double r_prepare      = 1.0;

//Chain 2 commands
const double r_fail_clean2;
const double r_damage2;
const double r_clean2;
const double e2inspect = 0.445858731661247;
const double e2travel  = 1.0159273834252622;
const double e2clean   = 0.2;
const double e2prepare = 0.3773563164740035;

//Chain 3 commands
const double r_fail_clean3;
const double r_damage3;
const double r_clean3;
const double e3inspect = 0.9280728888163583;
const double e3travel  = 1.0422852883743041;
const double e3clean   = 0.2;
const double e3prepare = 0.02422584452870712;

//Chain 4 commands
const double r_fail_clean4;
const double r_damage4;
const double r_clean4;
const double e4inspect = 0.5988032591724868;
const double e4travel  = 0.6660175789136936;
const double e4clean   = 0.2;
const double e4prepare = 0.9281784743958528;

//Chain 5 commands
const double r_fail_clean5;
const double r_damage5;
const double r_clean5;
const double e5inspect = 0.5986980089940765;
const double e5travel  = 0.39337811342605505;
const double e5clean   = 0.2;
const double e5prepare = 0.6612084813753132;

//Chain 6 commands
const double r_fail_clean6;
const double r_damage6;
const double r_clean6;
const double e6inspect = 0.3205609385966417;
const double e6travel  = 0.711562085389469;
const double e6clean   = 0.2;
const double e6prepare = 0.03716035718427822;

//Chain 7 commands
const double r_fail_clean7;
const double r_damage7;
const double r_clean7;
const double e7inspect = 0.2039327021513244;
const double e7travel  = 0.24066172186977514;
const double e7clean   = 0.2;
const double e7prepare = 0.26655295099299714;

//Dummy variable for chain 0, i.e., starting the model from chain 1
const int chain1 = 5;

//Module for chain 2
module chain2
chain2: [0..5] init 0;
[chain2inspect] chain2=0 & chain1=5 -> p_OK * r_inspect 	: (chain2'=1);
[chain2inspectB] chain2=0 & chain1=5-> (1-p_OK) * r_inspect 	: (chain2'=2);
[chain2travel] chain2=1 -> r_travel 	: (chain2'=5);
[chain2clean] chain2=2 -> x2* r_clean2: (chain2'=1);
[chain2cleanB] chain2=2 -> x2* r_fail_clean2: (chain2'=3);
[chain2cleanC] chain2=2 -> (1-x2)* r_travel : (chain2'=5);
[chain2cleanD] chain2=2 -> x2* r_damage2: (chain2'=4);
[chain2prepare] chain2=3 -> r_prepare : (chain2'=2);
endmodule

//Module for chain 3
module chain3
chain3: [0..5] init 0;
[chain3inspect] chain3=0 & chain2=5 -> p_OK * r_inspect 	: (chain3'=1);
[chain3inspectB] chain3=0 & chain2=5-> (1-p_OK) * r_inspect 	: (chain3'=2);
[chain3travel] chain3=1 -> r_travel 	: (chain3'=5);
[chain3clean] chain3=2 -> x3* r_clean3: (chain3'=1);
[chain3cleanB] chain3=2 -> x3* r_fail_clean3: (chain3'=3);
[chain3cleanC] chain3=2 -> (1-x3)* r_travel : (chain3'=5);
[chain3cleanD] chain3=2 -> x3* r_damage3: (chain3'=4);
[chain3prepare] chain3=3 -> r_prepare : (chain3'=2);
endmodule

//Module for chain 4
module chain4
chain4: [0..5] init 0;
[chain4inspect] chain4=0 & chain3=5 -> p_OK * r_inspect 	: (chain4'=1);
[chain4inspectB] chain4=0 & chain3=5-> (1-p_OK) * r_inspect 	: (chain4'=2);
[chain4travel] chain4=1 -> r_travel 	: (chain4'=5);
[chain4clean] chain4=2 -> x4* r_clean4: (chain4'=1);
[chain4cleanB] chain4=2 -> x4* r_fail_clean4: (chain4'=3);
[chain4cleanC] chain4=2 -> (1-x4)* r_travel : (chain4'=5);
[chain4cleanD] chain4=2 -> x4* r_damage4: (chain4'=4);
[chain4prepare] chain4=3 -> r_prepare : (chain4'=2);
endmodule

//Module for chain 5
module chain5
chain5: [0..5] init 0;
[chain5inspect] chain5=0 & chain4=5 -> p_OK * r_inspect 	: (chain5'=1);
[chain5inspectB] chain5=0 & chain4=5-> (1-p_OK) * r_inspect 	: (chain5'=2);
[chain5travel] chain5=1 -> r_travel 	: (chain5'=5);
[chain5clean] chain5=2 -> x5* r_clean5: (chain5'=1);
[chain5cleanB] chain5=2 -> x5* r_fail_clean5: (chain5'=3);
[chain5cleanC] chain5=2 -> (1-x5)* r_travel : (chain5'=5);
[chain5cleanD] chain5=2 -> x5* r_damage5: (chain5'=4);
[chain5prepare] chain5=3 -> r_prepare : (chain5'=2);
endmodule

//Module for chain 6
module chain6
chain6: [0..5] init 0;
[chain6inspect] chain6=0 & chain5=5 -> p_OK * r_inspect 	: (chain6'=1);
[chain6inspectB] chain6=0 & chain5=5-> (1-p_OK) * r_inspect 	: (chain6'=2);
[chain6travel] chain6=1 -> r_travel 	: (chain6'=5);
[chain6clean] chain6=2 -> x6* r_clean6: (chain6'=1);
[chain6cleanB] chain6=2 -> x6* r_fail_clean6: (chain6'=3);
[chain6cleanC] chain6=2 -> (1-x6)* r_travel : (chain6'=5);
[chain6cleanD] chain6=2 -> x6* r_damage6: (chain6'=4);
[chain6prepare] chain6=3 -> r_prepare : (chain6'=2);
endmodule

//Module for chain 7
module chain7
chain7: [0..5] init 0;
[chain7inspect] chain7=0 & chain6=5 -> p_OK * r_inspect 	: (chain7'=1);
[chain7inspectB] chain7=0 & chain6=5-> (1-p_OK) * r_inspect 	: (chain7'=2);
[chain7travel] chain7=1 -> r_travel 	: (chain7'=5);
[chain7clean] chain7=2 -> x7* r_clean7: (chain7'=1);
[chain7cleanB] chain7=2 -> x7* r_fail_clean7: (chain7'=3);
[chain7cleanC] chain7=2 -> (1-x7)* r_travel : (chain7'=5);
[chain7cleanD] chain7=2 -> x7* r_damage7: (chain7'=4);
[chain7prepare] chain7=3 -> r_prepare : (chain7'=2);
endmodule

//energy
rewards "energy"
[chain2inspect]  true : e2inspect;
[chain2travel] true : e2travel;
[chain2prepare] true : e2prepare;
[chain2clean] true : x2*e2clean + (1-x2)*e2travel;
[chain3inspect]  true : e3inspect;
[chain3travel] true : e3travel;
[chain3prepare] true : e3prepare;
[chain3clean] true : x3*e3clean + (1-x3)*e3travel;
[chain4inspect]  true : e4inspect;
[chain4travel] true : e4travel;
[chain4prepare] true : e4prepare;
[chain4clean] true : x4*e4clean + (1-x4)*e4travel;
[chain5inspect]  true : e5inspect;
[chain5travel] true : e5travel;
[chain5prepare] true : e5prepare;
[chain5clean] true : x5*e5clean + (1-x5)*e5travel;
[chain6inspect]  true : e6inspect;
[chain6travel] true : e6travel;
[chain6prepare] true : e6prepare;
[chain6clean] true : x6*e6clean + (1-x6)*e6travel;
[chain7inspect]  true : e7inspect;
[chain7travel] true : e7travel;
[chain7prepare] true : e7prepare;
[chain7clean] true : x7*e7clean + (1-x7)*e7travel;
endrewards

//Configuration parameters
const int x2=1;
const int x3=0;
const int x4=1;
const int x5=0;
const int x6=1;
const int x7=0;

